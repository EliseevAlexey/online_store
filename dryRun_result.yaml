NAME: my
LAST DEPLOYED: Fri May  8 02:05:16 2020
NAMESPACE: monitoring
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: hello-chart/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-hello-chart-test-connection"
  labels:
    helm.sh/chart: hello-chart-0.1.0
    app.kubernetes.io/name: hello-chart
    app.kubernetes.io/instance: my
    app.kubernetes.io/version: "v4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-hello-chart:9000']
  restartPolicy: Never
---
# Source: hello-chart/templates/initdb.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "hello-chart-job"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "hello-chart-job"
    app.kubernetes.io/version: v4
    helm.sh/chart: "hello-chart-0.1.0"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "my"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "my"
        helm.sh/chart: "hello-chart-0.1.0"
    spec:
      restartPolicy: Never
      initContainers:
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              value: "my-postgresql"
            - name: POSTGRES_PORT
              value: "5432"
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT;
              do echo waiting for database; sleep 2; done;
      containers:
        - name: post-install-job
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              value: "my-postgresql"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "my-hello-chart-secret"
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-hello-chart-secret"
                  key: DB_PASSWORD
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "my-hello-chart-secret"
                  key: DB_NAME
          command:
            - sh
            - "-c"
            - |
              psql postgres://$POSTGRES_USERNAME:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DATABASE <<'EOF'
                insert into users (name) values ('FromInitDb');
              EOF

  backoffLimit: 0
MANIFEST:
---
# Source: hello-chart/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.3
    release: "my"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "YQ=="
---
# Source: hello-chart/templates/config.yml
apiVersion: v1
kind: Secret
metadata:
  name: "my-hello-chart-secret"
type: Opaque
data:
  DB_URL: "amRiYzpwb3N0Z3Jlc3FsOi8vbXktcG9zdGdyZXNxbDo1NDMyL215YXBw"
  DB_NAME: "bXlhcHA="
  DB_USERNAME: "YWxleGV5"
  DB_PASSWORD: "YQ=="
  DB_PSQL_URL: "cG9zdGdyZXNxbDovL2FsZXhleTphQG15LXBvc3RncmVzcWwvbXlhcHA="
---
# Source: hello-chart/templates/config.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-hello-chart-config"
data:
  TEST_ENV: testEnv
---
# Source: hello-chart/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.9.3
    release: "my"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "my"
---
# Source: hello-chart/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.3
    release: "my"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "my"
    role: master
---
# Source: hello-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-hello-chart-service"
  labels:
    helm.sh/chart: hello-chart-0.1.0
    app.kubernetes.io/name: hello-chart
    app.kubernetes.io/instance: my
    app.kubernetes.io/version: "v4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 8000
      name: web
  selector:

    app.kubernetes.io/name: hello-chart
    app.kubernetes.io/instance: my
---
# Source: hello-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-hello-chart-deployment"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: hello-chart
      app.kubernetes.io/instance: my
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hello-chart
        app.kubernetes.io/instance: my
    spec:
      containers:
        - name: hello-chart
          image: "alexeyeliseev/simplerest:v4"
          env:
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: "my-hello-chart-secret"
                  key: DB_URL
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "my-hello-chart-secret"
                  key: DB_USERNAME
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-hello-chart-secret"
                  key: DB_PASSWORD
            - name: TEST_ENV
              valueFrom:
                configMapKeyRef:
                  name: "my-hello-chart-config"
                  key: TEST_ENV
          ports:
            - containerPort: 8000
          livenessProbe:
            httpGet:
              port: 8000
              path: /
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              port: 8000
              path: /health
            initialDelaySeconds: 10
            periodSeconds: 5
---
# Source: hello-chart/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-dicts-common
  labels:
    app: postgresql
    chart: postgresql-8.9.3
    release: "my"
    heritage: "Helm"
  annotations:
spec:
  serviceName: my-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "my"
      role: master
  template:
    metadata:
      name: my-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.9.3
        release: "my"
        heritage: "Helm"
        role: master
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: my-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r87
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "alexey"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "myapp"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "alexey" -d "myapp" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "alexey" -d "myapp" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hello-chart/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "my-hello-chart-ingress"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - host: arch.homework
      http:
        paths:
          - path: /otusapp($|/)(.*)
            backend:
              serviceName: "my-hello-chart-service"
              servicePort: 9000
---
# Source: hello-chart/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: my-hello-chart
  labels:

    helm.sh/chart: hello-chart-0.1.0
    app.kubernetes.io/name: hello-chart
    app.kubernetes.io/instance: my
    app.kubernetes.io/version: "v4"
    app.kubernetes.io/managed-by: Helm
spec:
  jobLabel: my-hello-chart
  namespaceSelector:
    matchNames:
      - "monitoring"
  selector:
    matchLabels:
      app.kubernetes.io/name: hello-chart
      app.kubernetes.io/instance: my
  endpoints:
    - interval: 15s
      port: web
      path: /actuator/prometheus

NOTES:
  TO BE DONE
